
## 1. Título  
**Implementación y Configuración de un Servidor Web Nginx en Contenedores Docker**

## 2. Tiempo de duración  
**3 horas**

## 3. Fundamentos
Un servidor web es un software que procesa solicitudes a través del protocolo HTTP, entregando contenido a los clientes que lo solicitan, típicamente navegadores web. Entre los servidores web más populares se encuentra Nginx, un servidor de alto rendimiento conocido por su eficiencia, estabilidad y bajo consumo de recursos.

Nginx (pronunciado "engine-x") fue creado originalmente por Igor Sysoev en 2004 para resolver el problema C10K (manejar 10,000 conexiones concurrentes). A diferencia de servidores web tradicionales que crean un nuevo proceso o hilo para cada conexión, Nginx utiliza una arquitectura asíncrona y orientada a eventos, lo que le permite manejar múltiples conexiones dentro de un solo proceso de trabajo.

La containerización, por otro lado, es una tecnología que permite empaquetar una aplicación junto con todas sus dependencias en una unidad estandarizada llamada contenedor. Docker es la plataforma de containerización más popular, que permite crear, distribuir y ejecutar aplicaciones en contenedores. Los contenedores son ligeros, portátiles y aislados, lo que facilita la implementación de aplicaciones en diferentes entornos.

La combinación de Nginx y Docker proporciona una solución potente para implementar servidores web. Al ejecutar Nginx en un contenedor Docker, obtenemos beneficios como:

1. **Portabilidad**: El servidor web puede ejecutarse de manera consistente en cualquier entorno que tenga Docker instalado.
2. **Aislamiento**: El servidor web se ejecuta en un entorno aislado, lo que mejora la seguridad y evita conflictos con otras aplicaciones.
3. **Escalabilidad**: Es fácil crear múltiples instancias del servidor web para manejar aumentos en el tráfico.
4. **Facilidad de configuración**: La configuración del servidor web se puede versionar y compartir fácilmente.

Nginx puede funcionar como servidor web, proxy inverso, balanceador de carga y caché HTTP. En esta práctica, nos enfocaremos en su función como servidor web para servir contenido estático. La configuración básica de Nginx se realiza a través de archivos de configuración con una sintaxis específica, donde se definen los servidores virtuales, las ubicaciones, las reglas de enrutamiento y otras directivas.

Para implementar Nginx en Docker, se uso una imagen oficial de Nginx disponible en Docker Hub. Esta imagen incluye Nginx preinstalado y configurado con valores predeterminados, pero podemos personalizarla según nuestras necesidades proporcionando nuestros propios archivos de configuración y contenido web.

## 4. Conocimientos previos  
Para realizar esta practica se necesita tener claro los siguientes temas:
- Comandos básicos de Linux (cd, ls, mkdir, etc.)
- Conceptos básicos de redes (HTTP, puertos, direcciones IP)
- Fundamentos de servidores web
- Conocimientos básicos de Docker (imágenes, contenedores, volúmenes)
- Editor de texto en terminal (vim, nano)

## 5. Objetivos a alcanzar  
- Implementar un servidor web Nginx utilizando contenedores Docker
- Configurar correctamente Nginx para servir contenido estático
- Personalizar la configuración de Nginx mediante archivos de configuración
- Utilizar volúmenes de Docker para persistir datos y configuraciones
- Comprender la estructura de los archivos de configuración de Nginx
- Implementar múltiples sitios web (hosts virtuales) en un solo servidor Nginx
- Configurar reglas de redirección y reescritura en Nginx

## 6. Equipo necesario  

- Computador con sistema Linux 41
- Docker Desktop v4.x o superior instalado y funcionando
- Conexión a Internet para descargar imágenes de Docker
- Navegador web moderno 
- Mínimo 4GB de RAM y 10GB de espacio libre en disco
- Terminal o línea de comandos

## 7. Material de apoyo  

   
- Documentación oficial de Docker: https://docs.docker.com/
- Documentación oficial de Nginx: https://nginx.org/en/docs/
- Imagen oficial de Nginx en Docker Hub: https://hub.docker.com/_/nginx
- Guía de comandos básicos de Linux: https://www.linuxfoundation.org/blog/blog/classic-sysadmin-linux-command-line-cheat-sheet
- Repositorio de ejemplos de configuración de Nginx: https://github.com/nginx/nginx-wiki 
- Guía de la asignatura y material proporcionado por el profesor.  
- Repositorios y documentacion en clase

## 8. Procedimiento  

**Paso 1:**  Crear estructura del proyecto
```bash
PROYECT_SUPERMERCADO/
├── frontend/   # React
├── backend/    # Flask
└── docker-compose.yml

```


**Paso 2:**   Configuración de Flask



**Paso 3:**  Configurar el backend con Express
> **Figura 8-3-1.**
> Asegurar que el backend esté preparado para recibir peticiones desde el frontend con CORS configurado.
 <img src="./../../Tools/Photos/2do-Semana-10/Captura de pantalla 2025-06-12 224304.png" alt="drawing" width="800"/>


**Paso 4:** Configurar el archivo docker-compose.yml
> **Figura 8-4-1.**
 <img src="./../../Tools/Photos/2do-Semana-10/Captura de pantalla 2025-06-12 224415.png" alt="drawing" width="800"/>
 

**Paso 5:** Ejecutar el proyecto
```bash
docker-compose up --build
```
> **Figura 8-5-1.**
 <img src="./../../Tools/Photos/2do-Semana-10/Captura de pantalla 2025-06-12 224559.png" alt="drawing" width="800"/>
 

**Paso 6:** Verificar resultados
> **Figura 8-6-1.**
> Abrir en el navegador **http://localhost:3000** para visualizar el frontend desplegado por Nginx.
 <img src="./../../Tools/Photos/2do-Semana-10/Captura de pantalla 2025-06-12 225755.png" alt="drawing" width="800"/>
 
> **Figura 8-6-2.**
 <img src="./../../Tools/Photos/2do-Semana-10/Captura de pantalla 2025-06-12 225838.png" alt="drawing" width="800"/>
 
> **Figura 8-6-3.**
> Estructura de servicios corriendo.
  <img src="./../../Tools/Photos/2do-Semana-10/Captura de pantalla 2025-06-12 224824.png" alt="drawing" width="800"/>
  
> **Figura 8-6-4.**
  <img src="./../../Tools/Photos/2do-Semana-10/Captura de pantalla 2025-06-12 224618.png" alt="drawing" width="800"/>


 
## 9. Resultados esperados

Al finalizar esta práctica se espera que el estudiante haya logrado desplegar correctamente una aplicación web fullstack. El frontend debe estar disponible en http://localhost y servir los archivos estáticos usando Nginx, mientras que el backend responde correctamente a las peticiones realizadas por la interfaz.- Contenedores de PostgreSQL, pgAdmin y backend corriendo sin errores.

Entre los logros verificados están:
- Build exitoso del frontend 
- Comunicación correcta con el backend 
- Acceso a datos desde la base de datos 
- Uso adecuado de variables de entorno y configuración modular


  ## 🔊 Audio Explicativo de la practica.
https://drive.google.com/file/d/130vniyp-lyZTDa9CT1sCE7c0071x4jSZ/view?usp=sharing

## 10. Bibliografía

- Docker Inc. (2024). Docker Documentation. https://docs.docker.com/
- Nginx. (2024). Nginx Documentation. https://nginx.org/en/docs/
- React Team. (2024). React Documentation. https://react.dev/
- Node.js Foundation. (2024). Node.js Documentation. https://nodejs.org/
- PostgreSQL Global Development Group. (2024). PostgreSQL Documentation. https://www.postgresql.org/
